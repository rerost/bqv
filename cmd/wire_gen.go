// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	"cloud.google.com/go/bigquery"
	"cloud.google.com/go/bigquery/datatransfer/apiv1"
	"context"
	"github.com/googleapis/google-cloud-go-testing/bigquery/bqiface"
	"github.com/pkg/errors"
	"github.com/rerost/bqv/domain/query"
	"github.com/rerost/bqv/domain/template"
	"github.com/rerost/bqv/domain/template/resolver"
	"github.com/rerost/bqv/domain/tester"
	"github.com/rerost/bqv/domain/viewmanager"
	"github.com/rerost/bqv/domain/viewservice"
	"github.com/spf13/cobra"
)

// Injectors from wire.go:

func InitializeCmd(ctx context.Context, cfg Config) (*cobra.Command, error) {
	client, err := NewDataTransferClient(ctx)
	if err != nil {
		return nil, err
	}
	viewService := NewViewService(client, cfg)
	bqClient, err := NewBQClient(ctx, cfg)
	if err != nil {
		return nil, err
	}
	bqManager := viewmanager.NewBQManager(bqClient)
	fileManager := NewFileManager(cfg)
	bqifaceClient, err := NewRawBQClient(ctx, cfg)
	if err != nil {
		return nil, err
	}
	queryService := query.NewQueryService(bqifaceClient)
	queryResolver := resolver.NewQueryResolver(bqifaceClient)
	templateService := template.NewTemplateService(queryResolver)
	testService := tester.NewTestService(queryService)
	command := NewCmdRoot(ctx, viewService, bqManager, fileManager, queryService, templateService, testService)
	return command, nil
}

// wire.go:

func NewRawBQClient(ctx context.Context, cfg Config) (bqiface.Client, error) {
	c, err := bigquery.NewClient(ctx, cfg.ProjectID)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return bqiface.AdaptClient(c), nil
}

func NewBQClient(ctx context.Context, cfg Config) (viewmanager.BQClient, error) {
	c, err := NewRawBQClient(ctx, cfg)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return viewmanager.BQClient(c), nil
}

func NewDataTransferClient(ctx context.Context) (*datatransfer.Client, error) {
	c, err := datatransfer.NewClient(ctx)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return c, nil
}

func NewViewService(datatransferClient *datatransfer.Client, cfg Config) viewservice.ViewService {
	return viewservice.NewService(datatransferClient, cfg.ProjectID)
}

func NewFileManager(cfg Config) viewmanager.FileManager {
	return viewmanager.NewFileManager(cfg.Dir)
}
